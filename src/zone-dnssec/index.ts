/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */

// https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zone_dnssec
// generated from terraform resource schema

import { Construct } from 'constructs';
import * as cdktf from 'cdktf';

// Configuration

export interface ZoneDnssecConfig extends cdktf.TerraformMetaArguments {
  /**
  * If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
  * providers to serve a DNSSEC-signed zone at the same time.
  * This is required for DNSKEY records (except those automatically
  * generated by Cloudflare) to be added to the zone.
  * 
  * See [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/) for details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zone_dnssec#dnssec_multi_signer ZoneDnssec#dnssec_multi_signer}
  */
  readonly dnssecMultiSigner?: boolean | cdktf.IResolvable;
  /**
  * If true, allows Cloudflare to transfer in a DNSSEC-signed zone
  * including signatures from an external provider, without requiring
  * Cloudflare to sign any records on the fly.
  * 
  * Note that this feature has some limitations.
  * See [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zone_dnssec#dnssec_presigned ZoneDnssec#dnssec_presigned}
  */
  readonly dnssecPresigned?: boolean | cdktf.IResolvable;
  /**
  * If true, enables the use of NSEC3 together with DNSSEC on the zone.
  * Combined with setting dnssec_presigned to true, this enables the use of
  * NSEC3 records when transferring in from an external provider.
  * If dnssec_presigned is instead set to false (default), NSEC3 records will be
  * generated and signed at request time.
  * 
  * See [DNSSEC with NSEC3](https://developers.cloudflare.com/dns/dnssec/enable-nsec3/) for details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zone_dnssec#dnssec_use_nsec3 ZoneDnssec#dnssec_use_nsec3}
  */
  readonly dnssecUseNsec3?: boolean | cdktf.IResolvable;
  /**
  * Status of DNSSEC, based on user-desired state and presence of necessary records.
  * Available values: "active", "disabled".
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zone_dnssec#status ZoneDnssec#status}
  */
  readonly status?: string;
  /**
  * Identifier.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zone_dnssec#zone_id ZoneDnssec#zone_id}
  */
  readonly zoneId: string;
}

/**
* Represents a {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zone_dnssec cloudflare_zone_dnssec}
*/
export class ZoneDnssec extends cdktf.TerraformResource {

  // =================
  // STATIC PROPERTIES
  // =================
  public static readonly tfResourceType = "cloudflare_zone_dnssec";

  // ==============
  // STATIC Methods
  // ==============
  /**
  * Generates CDKTF code for importing a ZoneDnssec resource upon running "cdktf plan <stack-name>"
  * @param scope The scope in which to define this construct
  * @param importToId The construct id used in the generated config for the ZoneDnssec to import
  * @param importFromId The id of the existing ZoneDnssec that should be imported. Refer to the {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zone_dnssec#import import section} in the documentation of this resource for the id to use
  * @param provider? Optional instance of the provider where the ZoneDnssec to import is found
  */
  public static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "cloudflare_zone_dnssec", importId: importFromId, provider });
      }

  // ===========
  // INITIALIZER
  // ===========

  /**
  * Create a new {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zone_dnssec cloudflare_zone_dnssec} Resource
  *
  * @param scope The scope in which to define this construct
  * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
  * @param options ZoneDnssecConfig
  */
  public constructor(scope: Construct, id: string, config: ZoneDnssecConfig) {
    super(scope, id, {
      terraformResourceType: 'cloudflare_zone_dnssec',
      terraformGeneratorMetadata: {
        providerName: 'cloudflare',
        providerVersion: '5.11.0',
        providerVersionConstraint: '~> 5.0'
      },
      provider: config.provider,
      dependsOn: config.dependsOn,
      count: config.count,
      lifecycle: config.lifecycle,
      provisioners: config.provisioners,
      connection: config.connection,
      forEach: config.forEach
    });
    this._dnssecMultiSigner = config.dnssecMultiSigner;
    this._dnssecPresigned = config.dnssecPresigned;
    this._dnssecUseNsec3 = config.dnssecUseNsec3;
    this._status = config.status;
    this._zoneId = config.zoneId;
  }

  // ==========
  // ATTRIBUTES
  // ==========

  // algorithm - computed: true, optional: false, required: false
  public get algorithm() {
    return this.getStringAttribute('algorithm');
  }

  // digest - computed: true, optional: false, required: false
  public get digest() {
    return this.getStringAttribute('digest');
  }

  // digest_algorithm - computed: true, optional: false, required: false
  public get digestAlgorithm() {
    return this.getStringAttribute('digest_algorithm');
  }

  // digest_type - computed: true, optional: false, required: false
  public get digestType() {
    return this.getStringAttribute('digest_type');
  }

  // dnssec_multi_signer - computed: false, optional: true, required: false
  private _dnssecMultiSigner?: boolean | cdktf.IResolvable; 
  public get dnssecMultiSigner() {
    return this.getBooleanAttribute('dnssec_multi_signer');
  }
  public set dnssecMultiSigner(value: boolean | cdktf.IResolvable) {
    this._dnssecMultiSigner = value;
  }
  public resetDnssecMultiSigner() {
    this._dnssecMultiSigner = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dnssecMultiSignerInput() {
    return this._dnssecMultiSigner;
  }

  // dnssec_presigned - computed: false, optional: true, required: false
  private _dnssecPresigned?: boolean | cdktf.IResolvable; 
  public get dnssecPresigned() {
    return this.getBooleanAttribute('dnssec_presigned');
  }
  public set dnssecPresigned(value: boolean | cdktf.IResolvable) {
    this._dnssecPresigned = value;
  }
  public resetDnssecPresigned() {
    this._dnssecPresigned = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dnssecPresignedInput() {
    return this._dnssecPresigned;
  }

  // dnssec_use_nsec3 - computed: false, optional: true, required: false
  private _dnssecUseNsec3?: boolean | cdktf.IResolvable; 
  public get dnssecUseNsec3() {
    return this.getBooleanAttribute('dnssec_use_nsec3');
  }
  public set dnssecUseNsec3(value: boolean | cdktf.IResolvable) {
    this._dnssecUseNsec3 = value;
  }
  public resetDnssecUseNsec3() {
    this._dnssecUseNsec3 = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dnssecUseNsec3Input() {
    return this._dnssecUseNsec3;
  }

  // ds - computed: true, optional: false, required: false
  public get ds() {
    return this.getStringAttribute('ds');
  }

  // flags - computed: true, optional: false, required: false
  public get flags() {
    return this.getNumberAttribute('flags');
  }

  // id - computed: true, optional: false, required: false
  public get id() {
    return this.getStringAttribute('id');
  }

  // key_tag - computed: true, optional: false, required: false
  public get keyTag() {
    return this.getNumberAttribute('key_tag');
  }

  // key_type - computed: true, optional: false, required: false
  public get keyType() {
    return this.getStringAttribute('key_type');
  }

  // modified_on - computed: true, optional: false, required: false
  public get modifiedOn() {
    return this.getStringAttribute('modified_on');
  }

  // public_key - computed: true, optional: false, required: false
  public get publicKey() {
    return this.getStringAttribute('public_key');
  }

  // status - computed: false, optional: true, required: false
  private _status?: string; 
  public get status() {
    return this.getStringAttribute('status');
  }
  public set status(value: string) {
    this._status = value;
  }
  public resetStatus() {
    this._status = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get statusInput() {
    return this._status;
  }

  // zone_id - computed: false, optional: false, required: true
  private _zoneId?: string; 
  public get zoneId() {
    return this.getStringAttribute('zone_id');
  }
  public set zoneId(value: string) {
    this._zoneId = value;
  }
  // Temporarily expose input value. Use with caution.
  public get zoneIdInput() {
    return this._zoneId;
  }

  // =========
  // SYNTHESIS
  // =========

  protected synthesizeAttributes(): { [name: string]: any } {
    return {
      dnssec_multi_signer: cdktf.booleanToTerraform(this._dnssecMultiSigner),
      dnssec_presigned: cdktf.booleanToTerraform(this._dnssecPresigned),
      dnssec_use_nsec3: cdktf.booleanToTerraform(this._dnssecUseNsec3),
      status: cdktf.stringToTerraform(this._status),
      zone_id: cdktf.stringToTerraform(this._zoneId),
    };
  }

  protected synthesizeHclAttributes(): { [name: string]: any } {
    const attrs = {
      dnssec_multi_signer: {
        value: cdktf.booleanToHclTerraform(this._dnssecMultiSigner),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      dnssec_presigned: {
        value: cdktf.booleanToHclTerraform(this._dnssecPresigned),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      dnssec_use_nsec3: {
        value: cdktf.booleanToHclTerraform(this._dnssecUseNsec3),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      status: {
        value: cdktf.stringToHclTerraform(this._status),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      zone_id: {
        value: cdktf.stringToHclTerraform(this._zoneId),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
    };

    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined ))
  }
}
